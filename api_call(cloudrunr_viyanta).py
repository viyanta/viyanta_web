# -*- coding: utf-8 -*-
"""API_call(cloudrunr-viyanta).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HtHdepMZJoy2KGPDopHcuRf6ffqYyXJi
"""

!pip install tabula-py pandas openai PyMuPDF

mount = '/content/drive'
from google.colab import drive
drive.mount(mount)

import numpy as np
import pandas as pd
import os
import tabula
import openai
import google.generativeai as genai
import re
from tabula import read_pdf
from vertexai.preview.generative_models import GenerativeModel
import vertexai
from io import StringIO

open_ai_key=''
gemini_key='AIzaSyDOzLdGLGuFa08X2X7FBq8qpnjSlJnlUhw'

# os.environ["OPENAI_API_KEY"] = open_ai_key
# openai.api_key = os.getenv("OPENAI_API_KEY")

# os.environ['GOOGLE_API_KEY'] = gemini_key
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = './drive/MyDrive/Cloudrunr/summer-internship-25-d38e14f562b6.json'


print(os.environ['GOOGLE_APPLICATION_CREDENTIALS'])

genai.configure(api_key=gemini_key)
gemini_model=genai.GenerativeModel('gemini-2.5')

print(vertexai.init(
    project="summer-internship-25",
    location="us-central1",
))

chat_model=GenerativeModel('gemini-2.0-flash')
chat=chat_model.start_chat()

table_analyzer=GenerativeModel('gemini-1.5-pro-preview')
table_analyzer_chat=table_analyzer.start_chat()

def llm_question(prompt):
  response=gemini_model.generate(prompt=prompt)
  return response.result

def is_financial_row(row):
    count = sum(1 for cell in row if re.search(r"\(?-?\$?\d{1,3}(?:,\d{3})*(?:\.\d{2})?\)?", str(cell)))
    return count >= 2  # at least two financial-looking values

def modified_is_financial_row(row, min_numeric=1):
    numeric_pattern = re.compile(r"""
        ^[^\w-]*                # prefix like $, (, -, etc.
        (\d{1,3}(,\d{3})*|\d+)  # number with or without commas
        (\.\d+)?                # decimal
        [^\w]*$                 #  suffix like ), %, etc.
    """, re.VERBOSE)

    financial_keywords = {
        "revenue", "income", "assets", "liabilities", "equity", "expenses",
        "profit", "loss", "cash", "cost", "tax", "earnings", "dividend", "capital"
    }

    num_count = 0
    text_score = 0

    for cell in row:
        cell_lower = str(cell).lower().strip()

        # Check numbers
        if numeric_pattern.match(cell_lower.replace('(', '').replace(')', '')):
            num_count += 1

        # Check financial keywords
        for keyword in financial_keywords:
            if keyword in cell_lower:
                text_score += 1
                break

    return num_count >= min_numeric or text_score > 0

def clean_table(df):
    clean_rows = []
    buffer_row = None
    for _, row in df.iterrows():
        row_list = row.fillna('').astype(str).tolist()
        if is_financial_row(row_list):
            if buffer_row:
                clean_rows.append(buffer_row)
                buffer_row = None
            clean_rows.append(row_list)
        else:
            if buffer_row:
              if(len(row_list)==len(buffer_row)):
                  buffer_row = [a + " " + b for a, b in zip(buffer_row, row_list)]
              else:
                clean_rows.append(buffer_row)
                buffer_row = row_list
            else:
                buffer_row = row_list
    if buffer_row:
        clean_rows.append(buffer_row)

    try:
      max_len=max(len(row) for row in clean_rows)
      clean_rows=[row+[""]*(max_len-len(row)) for row in clean_rows]
      return clean_rows
    except:
      return []

def score(df):
        financial_rows = sum(modified_is_financial_row(row.fillna('').tolist()) for _, row in df.iterrows())
        if(len(df)):
          return financial_rows/len(df)
        return 0

def rank_tables(dfs):
    return sorted(dfs, key=score, reverse=True)

def extract_tabula(file_path, pages="all", mode="both"):
    dfs = []
    if mode in ("stream", "both"):
        dfs.extend(read_pdf(file_path, pages=pages, stream=True, guess=False, multiple_tables=True))
    if mode in ("lattice", "both"):
        dfs.extend(read_pdf(file_path, pages=pages, lattice=True, guess=False, multiple_tables=True))
    return dfs

def extract_best_cleaned_table(file_path, pages="all", mode="both"):
    raw_dfs = extract_tabula(file_path, pages, mode)
    ranked = rank_tables(raw_dfs)
    if ranked:
        best_df = ranked[0]
        cleaned = clean_table(best_df)
        return ranked
    return None

def extract_all_cleaned_table(file_path, pages="all", mode="both"):
    raw_dfs = extract_tabula(file_path, pages, mode)
    scored_dfs=rank_tables(raw_dfs)

    valid_tables=[]
    for i in scored_dfs:
      cleaned = clean_table(i)
      if cleaned:
        valid_tables.append(pd.DataFrame(cleaned))
    for i,data in enumerate(valid_tables):
      print(file_path)
      print(file_path.split("/")[-1].split(".")[0])
      data.to_csv(f'./drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/CSV_files/{file_path.split("/")[-1].split(".")[0]}_{i}.csv')
    return valid_tables



"""# LLM Prompt"""

def tables_to_prompt(tables):
  prompt='You are a financial analysis expert. You are provided with financial data corresponding to various forms of a single bank in the form of financial tables, you are to analyse and interpret the tables and the data from a financial perspective and answer further questions posed'

  for i,data in enumerate(tables):
    for j,dataframe in enumerate(data):
      prompt+=f'Document {i+1} Table {j+1}:\n{dataframe.to_string(index=False)}'

  return prompt

def analyze_pdf():
  tables_list=[]
  base_path='./drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/HDFC Life  S FY2025 Q1/'
  for pdf in os.listdir(base_path):
    tables=extract_all_cleaned_table(base_path+pdf)
    tables_list.append(tables)
  prompt=tables_to_prompt(tables_list)
  # response=llm_question(prompt)
  return prompt

prompt=analyze_pdf()



chat.send_message(prompt)

response1=chat.send_message("What is the total amount shares of shareholders holding 1% and above of the total capital as on June 30, 2024")
print(response1.text)

len('You are a financial analysis expert. You are provided with financial data corresponding to various forms of a single bank in the form of financial tables, you are to analyse and interpret the tables and the data from a financial perspective and answer further questions posed')

# table_prompt='You are a financial assistant, you are given a set of financial data in the form of tables that are structured in the right manner, your task is to accept these tables analyze them and then return structured tables in the form of dataframes that can be read by the user '+prompt[275:]

# response_tables=table_analyzer_chat.send_message(table_prompt)

"""# Single PDF analysis"""

table_prompt='you are given a table in str format (extracted using Python from a pdf) and the original pdf (1 pager). the pdf contains insurance related data and the table in the form of a string is  extracted from the page using certain python modules. your task is to review the string, its format and structure and make sure the script has extracted the table accurately. Verify numnbers.  incase of any errors, you are to rectify the mistakes in the table, report the mistakes as well as the new table'

table1_path='/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/HDFC Life  S FY2025 Q1/HDFC Life  S FY2025 Q1 - 15.pdf'
table2_path='/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/HDFC Life  S FY2025 Q1/HDFC Life  S FY2025 Q1 - 19.pdf'

csv_1_path='/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/CSV_files/HDFC Life  S FY2025 Q1 - 15_0.csv'
csv_2_1_path='/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/CSV_files/HDFC Life  S FY2025 Q1 - 19_0.csv'
csv_2_2_path='/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/CSV_files/HDFC Life  S FY2025 Q1 - 19_1.csv'
csv_2_3_path='/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/CSV_files/HDFC Life  S FY2025 Q1 - 19_2.csv'

from google.oauth2 import service_account
import google.auth.transport.requests


VERTEX_SCOPE = ["https://www.googleapis.com/auth/cloud-platform"]

# Load credentials and assign scopes
credentials = service_account.Credentials.from_service_account_file(
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"],
    scopes=VERTEX_SCOPE
)

# Optional: Force a test request to verify validity
auth_req = google.auth.transport.requests.Request()
credentials.refresh(auth_req)
print("Authenticated as:", credentials.service_account_email)

import os
from vertexai import init
from vertexai.preview.generative_models import GenerativeModel

# Set path to downloaded service account key
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "./drive/MyDrive/Cloudrunr/summer-internship-25-d38e14f562b6.json"

# Initialize
init(project="summer-internship-25", location="us-central1",credentials=credentials)

# Create chat
model = GenerativeModel("gemini-2.0-flash")
table_checker_chat = model.start_chat(response_validation=False)

# Send message
response = table_checker_chat.send_message(table_prompt)
print(response.text)

print(os.path.exists(os.environ["GOOGLE_APPLICATION_CREDENTIALS"]))

def maker_checker(pdf_file_path,csv_file_path):
  prompt_to_checker=f'This is the string of the table = {csv_file_path} and This is the pdf file path = {pdf_file_path} , use these 2 to analyse and report the new tables and errors in the table'
  table_checker=table_checker_chat.send_message(prompt_to_checker)
  return table_checker.text

csv_file_path='./drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/CSV_files/'
pdf_file_path='./drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/HDFC Life  S FY2025 Q1/'
dictionary_pdf_csv={}
for pdf in os.listdir(pdf_file_path):
  for csv in os.listdir(csv_file_path):
    if pdf.split(".")[0]==csv.split("_")[0]:
      dataframe=pd.read_csv(csv_file_path+csv)
      if(pdf in dictionary_pdf_csv.keys()):
        dictionary_pdf_csv[pdf].append(dataframe.to_string(index=False))
      else:
        dictionary_pdf_csv[pdf]=[dataframe.to_string(index=False)]

modified_tables={}
for pdf,table_string in dictionary_pdf_csv.items():
  for tables in table_string:
    response_from_model=maker_checker(pdf_file_path+pdf,tables)
    print(pdf)
    # print(response_from_model)
    try:
      table_string=response_from_model.split('```')[1]
    except:
      print(response_from_model)
      table_string=response_from_model
    # print(table_string)
    if(pdf in modified_tables.keys()):
      modified_tables[pdf].append(table_string)
    else:
      modified_tables[pdf]=[table_string]
    # modified_tables[pdf]=table_string
  # break

print(modified_tables)

dataframe_1=pd.read_csv(csv_1_path).to_string(index=False)
dataframe_2_1=pd.read_csv(csv_2_1_path).to_string(index=False)
dataframe_2_2=pd.read_csv(csv_2_2_path).to_string(index=False)
dataframe_2_3=pd.read_csv(csv_2_3_path).to_string(index=False)

print(maker_checker(table1_path,dataframe_1))

print(maker_checker(table2_path,dataframe_2_1))

print(maker_checker(table2_path,dataframe_2_2))

print(maker_checker(table2_path,dataframe_2_3))

corrected_table_1='''
Title: List of shareholders holding 1% and above of the total capital as on June 30, 2024
Sr. No.|Name of the shareholder|No. of shares|% to Capital
1|Exide Industries Limited|87022222|4.05
2|ICICI Prudential Mutual Fund|75353426|3.50
3|Government of Singapore|59840501|2.78
4|Capital World Growth and Income Fund|40382630|1.88
5|Camas Investments Pte. Ltd.|36559723|1.70
6|SBI Mutual Fund|35996158|1.67
7|Nippon Life India Mutual Fund|23633043|1.10
Total|Total|358787703|16.68
'''

corrected_table_2_1='''
Category|Description of Investment Type|Value 1|Value 2
LONG TERM INVESTMENTS|Government Securities and Government guaranteed bonds including Treasury Bills|147868|71198
LONG TERM INVESTMENTS|Other Approved Securities|387160|366175
LONG TERM INVESTMENTS|Other Investments|268927|202964
LONG TERM INVESTMENTS|(a) Shares|-|-
LONG TERM INVESTMENTS|(aa) Equity|-|-
LONG TERM INVESTMENTS|(bb) Preference|-|-
LONG TERM INVESTMENTS|(b) Mutual Funds|138437|170350
LONG TERM INVESTMENTS|(c) Derivative Instruments|-|-
LONG TERM INVESTMENTS|(d) Debentures/ Bonds|26271|26271
LONG TERM INVESTMENTS|(e) Other Securities|-|-
LONG TERM INVESTMENTS|(f) Subsidiaries|474644|438740
LONG TERM INVESTMENTS|(g) Investment Properties-Real Estate|29591|44693
LONG TERM INVESTMENTS|Investments in Infrastructure and Social Sector|71198|-
LONG TERM INVESTMENTS|Other than Approved Investments|366175|-
Sub Total|Sub Total (A)|1472897|1320390
SHORT TERM INVESTMENTS|Government Securities and Government guaranteed bonds including Treasury Bills|150|25005
SHORT TERM INVESTMENTS|Other Approved Securities|49083|-
SHORT TERM INVESTMENTS|Other Investments|-|-
SHORT TERM INVESTMENTS|(a) Shares|-|-
SHORT TERM INVESTMENTS|(aa) Equity|-|-
SHORT TERM INVESTMENTS|(bb) Preference|-|-
SHORT TERM INVESTMENTS|(b) Mutual Funds|17625|100
SHORT TERM INVESTMENTS|(c) Derivative Instruments|-|-
SHORT TERM INVESTMENTS|(d) Debentures/ Bonds|-|-
SHORT TERM INVESTMENTS|(e) Other Securities|-|-
SHORT TERM INVESTMENTS|(aa) Commercial Paper|-|-
SHORT TERM INVESTMENTS|(bb) Certificate of Deposit|4812|-
SHORT TERM INVESTMENTS|(cc) Fixed Deposit|-|-
SHORT TERM INVESTMENTS|(dd) CBLO/Repo Investments|-|-
SHORT TERM INVESTMENTS|(f) Subsidiaries|8062|-
SHORT TERM INVESTMENTS|Investment Properties-Real Estate|-|
SHORT TERM INVESTMENTS|Investments in Infrastructure and Social Sector|-|
SHORT TERM INVESTMENTS|Other than Approved Investments|-|-
Sub Total|Sub Total (B)|79732|29976
TOTAL|TOTAL (A+B)|1552630|1350366
'''

corrected_table_2_2='''
Sr.No.|Particulars|As at June 30, 2024|As at June 30, 2023
1|Aggregate amount of Company's investments other than listed Equity Securities & Mutual Funds|1251363|1081598
2|Market Value of above investment|1242041|1064898
3|Investment in holding company at cost|180305|111931
4|Investment in subsidiaries company at cost|26271|26271
5|Government Securities deposited with the Clearing Corporation of India Ltd (CCIL) for Tri-Party repo/Securities segment (a) Amortised Cost|42353|NIL
5|Government Securities deposited with the Clearing Corporation of India Ltd (CCIL) for Tri-Party repo/Securities segment (b) Market Value of above investment|43744|NIL
6|Equity shares includes shares transferred under securities lending and borrowing scheme (SLB) where the Company retains all the associated risk and rewards on these securities|4182|4164
7|Investment made out of catastrophe reserve|NIL|NIL
'''

corrected_table_2_3='''
Particulars|As at June 30, 2024 (₹ Lakh)|As at June 30, 2023 (₹ Lakh)
1. Aggregate amount of Company's investments and the market value:|-|
a) Aggregate amount of Company's investment other than listed Equity Securities & Mutual Funds|1251363|1081598
b) Market Value of above investment|1242041|1064898
2. Investment in holding company at cost|180305|111931
3. Investment in subsidiaries company at cost|26271|26271
4. Government Securities deposited with the Clearing Corporation of India Ltd (CCIL) for Tri-Party repo/Securities segment a) Amortised Cost|42353|NIL
4. Government Securities deposited with the Clearing Corporation of India Ltd (CCIL) for Tri-Party repo/Securities segment  b) Market Value of above investment|43744|NIL
5. Equity shares includes shares transferred under securities lending and borrowing scheme (SLB) where the Company retains all the associated risk and rewards on these securities|4182|4164
6. Investment made out of catastrophe reserve|NIL|NIL
'''

def table_string_to_dataframe(table_string,csv_path):
  lines = [line.strip() for line in table_string.splitlines() if '|' in line]

  # Step 3: Convert rows to lists and remove markdown formatting
  rows = []
  for line in lines:
      if re.match(r'^\|?\s*\*\*.*\*\*\s*\|?$', line):  # Skip bolded section headers
          continue
      cells = [cell.strip() for cell in line.strip('|').split('|')]
      rows.append(cells)

  # Step 4: Extract header and normalize rows
  header = rows[0]
  normalized_rows = []
  for row in rows[1:]:
      if len(row) < len(header):
          row += [''] * (len(header) - len(row))
      elif len(row) > len(header):
          row = row[:len(header)]
      normalized_rows.append(row)

  # Step 5: Create DataFrame
  df = pd.DataFrame(normalized_rows, columns=header)
  df.to_csv(csv_path)
  return df

new_df1=table_string_to_dataframe(corrected_table_1,f'/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/Modified_CSV_files/{csv_1_path.split("/")[-1]}')
new_df1

new_df2_1=table_string_to_dataframe(corrected_table_2_1,f'/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/Modified_CSV_files/{csv_2_1_path.split("/")[-1]}')
new_df2_1

new_df2_2=table_string_to_dataframe(corrected_table_2_2,f'/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/Modified_CSV_files/{csv_2_2_path.split("/")[-1]}')
new_df2_2

new_df2_3=table_string_to_dataframe(corrected_table_2_3,f'/content/drive/MyDrive/Cloudrunr/HDFC_Life_S_FY2025_Q1/Modified_CSV_files/{csv_2_3_path.split("/")[-1]}')
new_df2_3







"""# **L1 Tables - HDFC**"""

nested_table_file_path='/content/drive/MyDrive/Cloudrunr/HDFC Life-20250616T072543Z-1-001/HDFC Life/HDFC L1/PDF/HDFC Life  S FY2023 9M - 3.pdf'
valid_nested_tables_from_python=extract_all_cleaned_table(nested_table_file_path)

len(valid_nested_tables_from_python)



print(maker_checker(nested_table_file_path,valid_nested_tables_from_python[1].to_string(index=False)))

def table_string_to_json(table_string):
    lines = table_string.strip().splitlines()
    organization = lines[0].strip()
    form_line = lines[1].strip()
    form_name, unit = form_line.rsplit("(", 1)
    form_name = form_name.strip()
    unit = unit.replace(")", "").strip()

    data_lines = [line.strip() for line in lines[2:] if line.strip() and not set(line.strip()) == {"-"}]

    group_headers = data_lines[0].split("|")
    sub_headers = data_lines[1].split("|")

    headers = []
    for group, sub in zip(group_headers, sub_headers):
        group = group.strip()
        sub = sub.strip()
        if group and group.lower() != "particulars" and group.lower() != "schedule":
            headers.append((group, sub))
        else:
            headers.append((None, sub if sub else group))
    print(headers)
    # Data rows
    data = []
    for line in data_lines[2:]:
        row = line.split("|")
        if len(row) != len(headers):
            continue

        row_dict = {}
        grouped = {}
        for (group, sub), val in zip(headers, row):
            val = val.strip()
            if group is None:
                row_dict[sub] = val
            else:
                if group not in grouped:
                    grouped[group] = {}
                grouped[group][sub] = val
        row_dict.update(grouped)
        data.append(row_dict)

    # Final structure
    return {
        "organization": organization,
        "form_name": form_name,
        "data_type": "Financial Statement",
        "unit": unit,
        "table": data
    }

corrected_table_L1='''
HDFC Life Insurance Company Limited
Revenue Account for the Quarter Ended December 31, 2022 (₹ Lakh)

Particulars|Schedule|LINKED BUSINESS|NON-LINKED BUSINESS|TOTAL|GRAND TOTAL
---|---|---|---|---|---|
|LIFE|PENSION|HEALTH|VAR.INS|TOTAL|LIFE|ANNUITY|PENSION|HEALTH|VAR.INS|TOTAL
Premiums earned - net (a) Premium L-4|318839|9081|-|-|327920|324285|(3930)|-|-|328215|585802|185515|8809|1211|20033|801370|1457505
(b) Reinsurance ceded|(352)|||-|(352)|(238)|-|-|-|(238)|(18517)|-|(460)|-|(18977)|(19567)
(c) Reinsurance accepted|-|-|-|-|-|-|-|-|-|-|-|-
Sub Total|318487|9081|-|-|327568|324047|3930|-|-|327977|567285|185515|8809|751|20033|782393|1437938
Income from investments
(a) Interest, dividends & rent - gross|47311|6566|-|-|53877|77669|(4379)|-|-|82048|128063|37451|6516|86|11781|183897|319822
(b) Profit on sale / redemption of investments|93020|9140|-|-|102160|15643|-|-|-|15643|422|1|56|-|-|537|1016|118819
(c) (Loss on sale / redemption of investments)|(11350)|(1649)|-|-|(12999)|(1671)|-|-|-|(1671)|(2951)|(22)|(1292)|-|(2)|(4267)|(18937)
(d) Transfer / gain on revaluation / change in fair value*|60643|14725|-|-|75368|(31)|-|-|-|(31)|(1735)|(509)|-|-|-|(2244)|73093
(e) Amortisation of (premium) / discount on investments|-|-|-|-|-|-|-|-|-|-|-|-|-|-
Sub Total|189624|28782|-|-|218406|91610|4379|-|-|95989|123799|36921|5280|86|12316|178402|492797
Other Income
(a) Income on Unclaimed amount of Policyholders|829|-|-|-|-|829|-|-|-|-|-|-|829
(b) Others|157|7|-|-|164|4031|(93)|-|-|4124|2012|76|93|2|2102|6390
Contribution from Shareholders' A/c (a) Towards Excess Expenses of Management|-|-|-|-|-|-|-|-|-|-|-|-|-|-
(b) Others|-|-|-|-|-|-|-(31373)|-|-|(31373)|-|31373
TOTAL (A)|509097|37870|-|-|546967|419688|8402|-|-|428090|724469|222512|14098|840|32351|994270|1969327
Commission L-5|7254|58|-|-|7312|23973|77|-|-|24050|36870|992|27|32|-|37921|69283
Operating expenses related to insurance business L-6|23783|210|-|-|23993|65551|203|-|-|65754|117216|4345|136|589|5|122291|212038
Provision for doubtful debts Bad debts written off|-|-|-|-|-|-|-|-|-|-|-|-|-|-
Provision for tax|(15716)|||-|(15716)|2250|-|-|-|2250|207||(6)|124|-|337|(13129)
Provisions (other than taxation)
(a) For diminution in the value of investments (net)|-|||||(500)||||(500)|-|||-|-|-(500)
(b) Others - Provision for standard and non-standard assets|325|50|-|-|375|16|-|-|-|16|16||-|-|16|407
Goods and Services Tax on ULIP Charges|9236|504|-|-|9740||229|-|-|229|||1|13|14|9983
TOTAL (B)|24882|822|-|-|25704|91290|509|-|-|91799|154309|5337|164|627|142|160579|278082
Benefits paid (net) L-7|394338|36731|-|-|431069|133059|10471|-|-|143530|113725|30401|48697|248|65833|258904|833503
Interim bonuses paid|-|-||||32550|176|-|-|32726|-|-|-|-|-|-|32726
Change in valuation of liability against life policies in force
(a) Gross**|17825|(1509)|-|16316|168083|(4524)|-|163559|463286|185144|(39394)|(109)|(36332)|572595|752470
(b) Amount ceded in reinsurance|(6)||||(6)|(832)||||(832)|(6851)|||(40)|-|(6811)|(7649)
(c) Amount accepted in reinsurance|-|-|-|-|-|-|-|-|-|-|-|-|-|-
(d) Fund Reserve|60001|(394)|-|59607|-|-|-|-|59607
(e) Funds for discontinued policies|(11933)|(483)|-|(12416)|||||||
TOTAL (C)|460225|34345|-|-|494570|332860|6123|-|-|338983|570160|215545|9303|179|29501|824688|1658241
SURPLUS / (DEFICIT) (D) = (A)-(B)-(C)|23990|2703|-|-|26693|(4462)||||(2692)|-|1630|4631|34|2708|9003|33004
Amount transferred from Shareholders' Account (Non-technical Account)|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-
AMOUNT AVAILABLE FOR APPROPRIATION|23990|2703|-|-|26693|(4462)||||(2692)|-|1630|4631|34|2708|9003|33004
APPROPRIATIONS
Transfer to Shareholders' Account|23990|2703|-|-|26693|5639|276|-|-|5915|-|1630|4631|34|2708|9003|41611
Transfer to other reserves|-|-|-|-|-|-|-|-|-|-|-|-|-|-
Balance being Funds For Future Appropriations||||||(10101)|||1494|-|-|(8607)|-|||-|-|-(8607)
TOTAL (D)|23990|2703|-|-|26693|(4462)||||(2692)|-|1630|4631|34|2708|9003|33004
The total surplus as mentioned below :
(a)Interim bonuses Paid|-|-||||32550|176|-|-|32726|-|-|-|-|-|-|32726
(b) Terminal bonuses Paid|-|-||||17973|2304|-|-|20277|-|-|-|-|-|-|20277
(c) Allocation of bonus to Policyholders|-|-|-|-|-|-|-|-|-|-|-|-|-|-
(d) Surplus shown in the Revenue account|23990|2703|-|-|26693|(4462)||||(2692)|-|1630|4631|34|2708|9003|33004
(e) Total Surplus :[(a)+(b)+( c)+(d)]|23990|2703|-|-|26693|46061|4250|-|-|50311|-|1630|4631|34|2708|9003|86007
'''

json_dict=table_string_to_json(corrected_table_L1)

json_dict

